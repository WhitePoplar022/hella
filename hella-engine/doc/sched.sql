##alter table SCH_JOB_EXECUTION_PLAN add event varchar(40)  DEFAULT NULL;
##alter table SCH_JOB_EXECUTION_PLAN add description varchar(400)  DEFAULT NULL;
##alter table SCH_JOB_EXECUTION_PLAN add currentXjobState varchar(10) DEFAULT NULL;
##alter table SCH_JOB_EXECUTION_PLAN add currentXjobDate varchar(16) DEFAULT NULL;

#
# Table structure for table 'SCH_EXECUTE_PLAN_VERSION'
#
DROP TABLE IF EXISTS SCH_EXECUTE_PLAN_VERSION;
CREATE TABLE `SCH_EXECUTE_PLAN_VERSION` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `jobPlanVersion` int(10) NOT NULL,
  `clusterID` varchar(20) NOT NULL,
  `clusterName` varchar(40) NULL,
  `createDate` varchar(16) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
#
# Dumping data for table 'SCH_EXECUTE_PLAN_VERSION'
#

	
#
# Table structure for table 'SCH_JOB_EXECUTION_PLAN'
#
DROP TABLE IF EXISTS SCH_JOB_EXECUTION_PLAN;
CREATE TABLE `SCH_JOB_EXECUTION_PLAN` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `jobPlanType` varchar(20) NOT NULL,
  `executePlanVersionID` int(10) NOT NULL,
  `clusterID` varchar(20) NOT NULL,
  `jepID` varchar(20) NOT NULL,
  `jepName` varchar(40) NOT NULL,
  `cronType` varchar(10) NOT NULL,
  `cronExpression` varchar(40) NOT NULL,
  `event` varchar(40) DEFAULT NULL,
  `ignoreError` boolean NOT NULL,
  `state` varchar(10) NOT NULL,
  `currentXjobState` varchar(10) DEFAULT NULL,
  `currentXjobDate` varchar(16) DEFAULT NULL,
  `currentNode` varchar(40)  NULL,
  `description` varchar(400)  DEFAULT NULL,
  `createDate` varchar(16) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
#
# Dumping data for table 'SCH_JOB_EXECUTION_PLAN'
#

#
# Table structure for table 'SCH_JOBPLAN_NODE'
#
DROP TABLE IF EXISTS SCH_JOBPLAN_NODE;
CREATE TABLE `SCH_JOBPLAN_NODE` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `executorClusterID` varchar(20) NOT NULL,
  `jobExecutionPlanID` int(10) NOT NULL,
  `type` varchar(10) NOT NULL,
  `forkName` varchar(40)  NULL,
  `joinName` varchar(40)  NULL,
  `name` varchar(40) NOT NULL,
  `toNode` varchar(400)  NULL,
  `okNode` varchar(40)  NULL,
  `errorNode` varchar(40) NULL,
  `delayType` varchar(10) NULL,
  `delayTime` varchar(40) NULL,
  `errorMaxRedoTimes` int(10) NOT NULL,
  `errorRedoPeriod` int(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

#
# Dumping data for table 'SCH_JOBPLAN_NODE'
#

 

#
# Table structure for table 'SCH_XJOB_META'
#
DROP TABLE IF EXISTS SCH_XJOB_META;
CREATE TABLE `SCH_XJOB_META` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `jobExecutionPlanID` int(10) NOT NULL,
  `jobPlanNodeID` int(10) NOT NULL,
  `mode` varchar(10) NOT NULL,
  `executeUser` varchar(20)  NULL,
  `executionContent` varchar(100) NOT NULL,
  `jobClassName` varchar(100) NOT NULL,
  `args` varchar(200)  NULL,
  `description` varchar(200)  NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
#
# Dumping data for table 'SCH_XJOB_META'
#
#
# Table structure for table 'SCH_XJOB_STATE'
#
DROP TABLE IF EXISTS SCH_XJOB_STATE;
CREATE TABLE `SCH_XJOB_STATE` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `jobPlanNodeID` int(10) NOT NULL,
  `currentExecutorKey` varchar(20) NOT NULL,
  `jobPlanNodeState` varchar(20) NOT NULL,
  `runInfo` varchar(2500) NULL,
  `runTime` varchar(16) NOT NULL,
  `executeTimes` int(3) NOT NULL,
  `finishedPercent` int(3) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

#
# Dumping data for table 'SCH_XJOB_STATE'
#

#
# Table structure for table 'SCH_JOBPLAN_SUBSCRIBE'
#
DROP TABLE IF EXISTS SCH_JOBPLAN_SUBSCRIBE;
CREATE TABLE `SCH_JOBPLAN_SUBSCRIBE` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `clusterID` varchar(20) NOT NULL,
  `jepID` varchar(10)  NULL,
  `jepName` varchar(40)  NULL,
  `userEmail` varchar(300)  NULL,
  `userPhoneNumber` varchar(300)  NULL,
  `state` boolean NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

#
# Dumping data for table 'SCH_JOBPLAN_SUBSCRIBE'
#
 
#
# Table structure for table 'SCH_SYSTEM_LOG'
#
DROP TABLE IF EXISTS SCH_SYSTEM_LOG;
CREATE TABLE `SCH_SYSTEM_LOG` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `ip` varchar(20) NOT NULL,
  `operatorName` varchar(10) NULL,
  `logType` varchar(20)  NOT NULL,
  `logContent` varchar(2000)  NULL,
  `createDate` varchar(16) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
#
# Dumping data for table 'SCH_SYSTEM_LOG'
#


#
# Table structure for table 'SCH_NO_CONSUMPTION_JOB_EVENT'
#
DROP TABLE IF EXISTS SCH_NO_CONSUMPTION_JOB_EVENT;
CREATE TABLE `SCH_NO_CONSUMPTION_JOB_EVENT` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(40) NOT NULL,
  `createDate` varchar(16) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
#
# Dumping data for table 'SCH_JOB_EVENT'
#


#
# Quartz seems to work best with the driver mm.mysql-2.0.7-bin.jar
#
# PLEASE consider using mysql with innodb tables to avoid locking issues
#
# In your Quartz properties file, you'll need to set 
# org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#

DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
DROP TABLE IF EXISTS QRTZ_LOCKS;
DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
DROP TABLE IF EXISTS QRTZ_CALENDARS;


CREATE TABLE QRTZ_JOB_DETAILS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    JOB_NAME  VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250) NULL,
    JOB_CLASS_NAME   VARCHAR(250) NOT NULL,
    IS_DURABLE VARCHAR(1) NOT NULL,
    IS_NONCONCURRENT VARCHAR(1) NOT NULL,
    IS_UPDATE_DATA VARCHAR(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
);

CREATE TABLE QRTZ_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    JOB_NAME  VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250) NULL,
    NEXT_FIRE_TIME BIGINT(13) NULL,
    PREV_FIRE_TIME BIGINT(13) NULL,
    PRIORITY INTEGER NULL,
    TRIGGER_STATE VARCHAR(16) NOT NULL,
    TRIGGER_TYPE VARCHAR(8) NOT NULL,
    START_TIME BIGINT(13) NOT NULL,
    END_TIME BIGINT(13) NULL,
    CALENDAR_NAME VARCHAR(200) NULL,
    MISFIRE_INSTR SMALLINT(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
        REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)
);

CREATE TABLE QRTZ_SIMPLE_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    REPEAT_COUNT BIGINT(7) NOT NULL,
    REPEAT_INTERVAL BIGINT(12) NOT NULL,
    TIMES_TRIGGERED BIGINT(10) NOT NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_CRON_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    CRON_EXPRESSION VARCHAR(200) NOT NULL,
    TIME_ZONE_ID VARCHAR(80),
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_SIMPROP_TRIGGERS
  (          
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    STR_PROP_1 VARCHAR(512) NULL,
    STR_PROP_2 VARCHAR(512) NULL,
    STR_PROP_3 VARCHAR(512) NULL,
    INT_PROP_1 INT NULL,
    INT_PROP_2 INT NULL,
    LONG_PROP_1 BIGINT NULL,
    LONG_PROP_2 BIGINT NULL,
    DEC_PROP_1 NUMERIC(13,4) NULL,
    DEC_PROP_2 NUMERIC(13,4) NULL,
    BOOL_PROP_1 VARCHAR(1) NULL,
    BOOL_PROP_2 VARCHAR(1) NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) 
    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_BLOB_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_CALENDARS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    CALENDAR_NAME  VARCHAR(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (SCHED_NAME,CALENDAR_NAME)
);

CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_GROUP  VARCHAR(200) NOT NULL, 
    PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_FIRED_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    ENTRY_ID VARCHAR(95) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    FIRED_TIME BIGINT(13) NOT NULL,
    PRIORITY INTEGER NOT NULL,
    STATE VARCHAR(16) NOT NULL,
    JOB_NAME VARCHAR(200) NULL,
    JOB_GROUP VARCHAR(200) NULL,
    IS_NONCONCURRENT VARCHAR(1) NULL,
    REQUESTS_RECOVERY VARCHAR(1) NULL,
    PRIMARY KEY (SCHED_NAME,ENTRY_ID)
);

CREATE TABLE QRTZ_SCHEDULER_STATE
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT(13) NOT NULL,
    CHECKIN_INTERVAL BIGINT(13) NOT NULL,
    PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
);

CREATE TABLE QRTZ_LOCKS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    LOCK_NAME  VARCHAR(40) NOT NULL, 
    PRIMARY KEY (SCHED_NAME,LOCK_NAME)
);


commit;

