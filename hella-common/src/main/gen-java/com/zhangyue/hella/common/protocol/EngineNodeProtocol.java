/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zhangyue.hella.common.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EngineNodeProtocol {

  public interface Iface {

    public void doRegister(String clusterID, long registerTimestamp, String executorStartDate) throws org.apache.thrift.TException;

    public HeartbeatResponse sendHeartbeat(String executorClusterID, List<JobProgress> progressList, long lastSeen) throws org.apache.thrift.TException;

    public boolean isEngineAlive() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void doRegister(String clusterID, long registerTimestamp, String executorStartDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendHeartbeat(String executorClusterID, List<JobProgress> progressList, long lastSeen, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isEngineAlive(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void doRegister(String clusterID, long registerTimestamp, String executorStartDate) throws org.apache.thrift.TException
    {
      send_doRegister(clusterID, registerTimestamp, executorStartDate);
      recv_doRegister();
    }

    public void send_doRegister(String clusterID, long registerTimestamp, String executorStartDate) throws org.apache.thrift.TException
    {
      doRegister_args args = new doRegister_args();
      args.setClusterID(clusterID);
      args.setRegisterTimestamp(registerTimestamp);
      args.setExecutorStartDate(executorStartDate);
      sendBase("doRegister", args);
    }

    public void recv_doRegister() throws org.apache.thrift.TException
    {
      doRegister_result result = new doRegister_result();
      receiveBase(result, "doRegister");
      return;
    }

    public HeartbeatResponse sendHeartbeat(String executorClusterID, List<JobProgress> progressList, long lastSeen) throws org.apache.thrift.TException
    {
      send_sendHeartbeat(executorClusterID, progressList, lastSeen);
      return recv_sendHeartbeat();
    }

    public void send_sendHeartbeat(String executorClusterID, List<JobProgress> progressList, long lastSeen) throws org.apache.thrift.TException
    {
      sendHeartbeat_args args = new sendHeartbeat_args();
      args.setExecutorClusterID(executorClusterID);
      args.setProgressList(progressList);
      args.setLastSeen(lastSeen);
      sendBase("sendHeartbeat", args);
    }

    public HeartbeatResponse recv_sendHeartbeat() throws org.apache.thrift.TException
    {
      sendHeartbeat_result result = new sendHeartbeat_result();
      receiveBase(result, "sendHeartbeat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendHeartbeat failed: unknown result");
    }

    public boolean isEngineAlive() throws org.apache.thrift.TException
    {
      send_isEngineAlive();
      return recv_isEngineAlive();
    }

    public void send_isEngineAlive() throws org.apache.thrift.TException
    {
      isEngineAlive_args args = new isEngineAlive_args();
      sendBase("isEngineAlive", args);
    }

    public boolean recv_isEngineAlive() throws org.apache.thrift.TException
    {
      isEngineAlive_result result = new isEngineAlive_result();
      receiveBase(result, "isEngineAlive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isEngineAlive failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void doRegister(String clusterID, long registerTimestamp, String executorStartDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doRegister_call method_call = new doRegister_call(clusterID, registerTimestamp, executorStartDate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doRegister_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clusterID;
      private long registerTimestamp;
      private String executorStartDate;
      public doRegister_call(String clusterID, long registerTimestamp, String executorStartDate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clusterID = clusterID;
        this.registerTimestamp = registerTimestamp;
        this.executorStartDate = executorStartDate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doRegister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doRegister_args args = new doRegister_args();
        args.setClusterID(clusterID);
        args.setRegisterTimestamp(registerTimestamp);
        args.setExecutorStartDate(executorStartDate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_doRegister();
      }
    }

    public void sendHeartbeat(String executorClusterID, List<JobProgress> progressList, long lastSeen, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendHeartbeat_call method_call = new sendHeartbeat_call(executorClusterID, progressList, lastSeen, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendHeartbeat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String executorClusterID;
      private List<JobProgress> progressList;
      private long lastSeen;
      public sendHeartbeat_call(String executorClusterID, List<JobProgress> progressList, long lastSeen, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.executorClusterID = executorClusterID;
        this.progressList = progressList;
        this.lastSeen = lastSeen;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendHeartbeat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendHeartbeat_args args = new sendHeartbeat_args();
        args.setExecutorClusterID(executorClusterID);
        args.setProgressList(progressList);
        args.setLastSeen(lastSeen);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HeartbeatResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendHeartbeat();
      }
    }

    public void isEngineAlive(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isEngineAlive_call method_call = new isEngineAlive_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isEngineAlive_call extends org.apache.thrift.async.TAsyncMethodCall {
      public isEngineAlive_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isEngineAlive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isEngineAlive_args args = new isEngineAlive_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isEngineAlive();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("doRegister", new doRegister());
      processMap.put("sendHeartbeat", new sendHeartbeat());
      processMap.put("isEngineAlive", new isEngineAlive());
      return processMap;
    }

    public static class doRegister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doRegister_args> {
      public doRegister() {
        super("doRegister");
      }

      public doRegister_args getEmptyArgsInstance() {
        return new doRegister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doRegister_result getResult(I iface, doRegister_args args) throws org.apache.thrift.TException {
        doRegister_result result = new doRegister_result();
        iface.doRegister(args.clusterID, args.registerTimestamp, args.executorStartDate);
        return result;
      }
    }

    public static class sendHeartbeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendHeartbeat_args> {
      public sendHeartbeat() {
        super("sendHeartbeat");
      }

      public sendHeartbeat_args getEmptyArgsInstance() {
        return new sendHeartbeat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendHeartbeat_result getResult(I iface, sendHeartbeat_args args) throws org.apache.thrift.TException {
        sendHeartbeat_result result = new sendHeartbeat_result();
        result.success = iface.sendHeartbeat(args.executorClusterID, args.progressList, args.lastSeen);
        return result;
      }
    }

    public static class isEngineAlive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isEngineAlive_args> {
      public isEngineAlive() {
        super("isEngineAlive");
      }

      public isEngineAlive_args getEmptyArgsInstance() {
        return new isEngineAlive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isEngineAlive_result getResult(I iface, isEngineAlive_args args) throws org.apache.thrift.TException {
        isEngineAlive_result result = new isEngineAlive_result();
        result.success = iface.isEngineAlive();
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("doRegister", new doRegister());
      processMap.put("sendHeartbeat", new sendHeartbeat());
      processMap.put("isEngineAlive", new isEngineAlive());
      return processMap;
    }

    public static class doRegister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doRegister_args, Void> {
      public doRegister() {
        super("doRegister");
      }

      public doRegister_args getEmptyArgsInstance() {
        return new doRegister_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            doRegister_result result = new doRegister_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            doRegister_result result = new doRegister_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doRegister_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.doRegister(args.clusterID, args.registerTimestamp, args.executorStartDate,resultHandler);
      }
    }

    public static class sendHeartbeat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendHeartbeat_args, HeartbeatResponse> {
      public sendHeartbeat() {
        super("sendHeartbeat");
      }

      public sendHeartbeat_args getEmptyArgsInstance() {
        return new sendHeartbeat_args();
      }

      public AsyncMethodCallback<HeartbeatResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HeartbeatResponse>() { 
          public void onComplete(HeartbeatResponse o) {
            sendHeartbeat_result result = new sendHeartbeat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendHeartbeat_result result = new sendHeartbeat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendHeartbeat_args args, org.apache.thrift.async.AsyncMethodCallback<HeartbeatResponse> resultHandler) throws TException {
        iface.sendHeartbeat(args.executorClusterID, args.progressList, args.lastSeen,resultHandler);
      }
    }

    public static class isEngineAlive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isEngineAlive_args, Boolean> {
      public isEngineAlive() {
        super("isEngineAlive");
      }

      public isEngineAlive_args getEmptyArgsInstance() {
        return new isEngineAlive_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isEngineAlive_result result = new isEngineAlive_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isEngineAlive_result result = new isEngineAlive_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isEngineAlive_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isEngineAlive(resultHandler);
      }
    }

  }

  public static class doRegister_args implements org.apache.thrift.TBase<doRegister_args, doRegister_args._Fields>, java.io.Serializable, Cloneable, Comparable<doRegister_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doRegister_args");

    private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REGISTER_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("registerTimestamp", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField EXECUTOR_START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("executorStartDate", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doRegister_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doRegister_argsTupleSchemeFactory());
    }

    public String clusterID; // required
    public long registerTimestamp; // required
    public String executorStartDate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTER_ID((short)1, "clusterID"),
      REGISTER_TIMESTAMP((short)2, "registerTimestamp"),
      EXECUTOR_START_DATE((short)3, "executorStartDate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER_ID
            return CLUSTER_ID;
          case 2: // REGISTER_TIMESTAMP
            return REGISTER_TIMESTAMP;
          case 3: // EXECUTOR_START_DATE
            return EXECUTOR_START_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REGISTERTIMESTAMP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("clusterID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REGISTER_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("registerTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXECUTOR_START_DATE, new org.apache.thrift.meta_data.FieldMetaData("executorStartDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doRegister_args.class, metaDataMap);
    }

    public doRegister_args() {
    }

    public doRegister_args(
      String clusterID,
      long registerTimestamp,
      String executorStartDate)
    {
      this();
      this.clusterID = clusterID;
      this.registerTimestamp = registerTimestamp;
      setRegisterTimestampIsSet(true);
      this.executorStartDate = executorStartDate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doRegister_args(doRegister_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClusterID()) {
        this.clusterID = other.clusterID;
      }
      this.registerTimestamp = other.registerTimestamp;
      if (other.isSetExecutorStartDate()) {
        this.executorStartDate = other.executorStartDate;
      }
    }

    public doRegister_args deepCopy() {
      return new doRegister_args(this);
    }

    @Override
    public void clear() {
      this.clusterID = null;
      setRegisterTimestampIsSet(false);
      this.registerTimestamp = 0;
      this.executorStartDate = null;
    }

    public String getClusterID() {
      return this.clusterID;
    }

    public doRegister_args setClusterID(String clusterID) {
      this.clusterID = clusterID;
      return this;
    }

    public void unsetClusterID() {
      this.clusterID = null;
    }

    /** Returns true if field clusterID is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterID() {
      return this.clusterID != null;
    }

    public void setClusterIDIsSet(boolean value) {
      if (!value) {
        this.clusterID = null;
      }
    }

    public long getRegisterTimestamp() {
      return this.registerTimestamp;
    }

    public doRegister_args setRegisterTimestamp(long registerTimestamp) {
      this.registerTimestamp = registerTimestamp;
      setRegisterTimestampIsSet(true);
      return this;
    }

    public void unsetRegisterTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTERTIMESTAMP_ISSET_ID);
    }

    /** Returns true if field registerTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetRegisterTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __REGISTERTIMESTAMP_ISSET_ID);
    }

    public void setRegisterTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTERTIMESTAMP_ISSET_ID, value);
    }

    public String getExecutorStartDate() {
      return this.executorStartDate;
    }

    public doRegister_args setExecutorStartDate(String executorStartDate) {
      this.executorStartDate = executorStartDate;
      return this;
    }

    public void unsetExecutorStartDate() {
      this.executorStartDate = null;
    }

    /** Returns true if field executorStartDate is set (has been assigned a value) and false otherwise */
    public boolean isSetExecutorStartDate() {
      return this.executorStartDate != null;
    }

    public void setExecutorStartDateIsSet(boolean value) {
      if (!value) {
        this.executorStartDate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLUSTER_ID:
        if (value == null) {
          unsetClusterID();
        } else {
          setClusterID((String)value);
        }
        break;

      case REGISTER_TIMESTAMP:
        if (value == null) {
          unsetRegisterTimestamp();
        } else {
          setRegisterTimestamp((Long)value);
        }
        break;

      case EXECUTOR_START_DATE:
        if (value == null) {
          unsetExecutorStartDate();
        } else {
          setExecutorStartDate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER_ID:
        return getClusterID();

      case REGISTER_TIMESTAMP:
        return Long.valueOf(getRegisterTimestamp());

      case EXECUTOR_START_DATE:
        return getExecutorStartDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER_ID:
        return isSetClusterID();
      case REGISTER_TIMESTAMP:
        return isSetRegisterTimestamp();
      case EXECUTOR_START_DATE:
        return isSetExecutorStartDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doRegister_args)
        return this.equals((doRegister_args)that);
      return false;
    }

    public boolean equals(doRegister_args that) {
      if (that == null)
        return false;

      boolean this_present_clusterID = true && this.isSetClusterID();
      boolean that_present_clusterID = true && that.isSetClusterID();
      if (this_present_clusterID || that_present_clusterID) {
        if (!(this_present_clusterID && that_present_clusterID))
          return false;
        if (!this.clusterID.equals(that.clusterID))
          return false;
      }

      boolean this_present_registerTimestamp = true;
      boolean that_present_registerTimestamp = true;
      if (this_present_registerTimestamp || that_present_registerTimestamp) {
        if (!(this_present_registerTimestamp && that_present_registerTimestamp))
          return false;
        if (this.registerTimestamp != that.registerTimestamp)
          return false;
      }

      boolean this_present_executorStartDate = true && this.isSetExecutorStartDate();
      boolean that_present_executorStartDate = true && that.isSetExecutorStartDate();
      if (this_present_executorStartDate || that_present_executorStartDate) {
        if (!(this_present_executorStartDate && that_present_executorStartDate))
          return false;
        if (!this.executorStartDate.equals(that.executorStartDate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(doRegister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClusterID()).compareTo(other.isSetClusterID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterID, other.clusterID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegisterTimestamp()).compareTo(other.isSetRegisterTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegisterTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerTimestamp, other.registerTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExecutorStartDate()).compareTo(other.isSetExecutorStartDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecutorStartDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executorStartDate, other.executorStartDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doRegister_args(");
      boolean first = true;

      sb.append("clusterID:");
      if (this.clusterID == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("registerTimestamp:");
      sb.append(this.registerTimestamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("executorStartDate:");
      if (this.executorStartDate == null) {
        sb.append("null");
      } else {
        sb.append(this.executorStartDate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doRegister_argsStandardSchemeFactory implements SchemeFactory {
      public doRegister_argsStandardScheme getScheme() {
        return new doRegister_argsStandardScheme();
      }
    }

    private static class doRegister_argsStandardScheme extends StandardScheme<doRegister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterID = iprot.readString();
                struct.setClusterIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGISTER_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.registerTimestamp = iprot.readI64();
                struct.setRegisterTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXECUTOR_START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.executorStartDate = iprot.readString();
                struct.setExecutorStartDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doRegister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clusterID != null) {
          oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.clusterID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REGISTER_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.registerTimestamp);
        oprot.writeFieldEnd();
        if (struct.executorStartDate != null) {
          oprot.writeFieldBegin(EXECUTOR_START_DATE_FIELD_DESC);
          oprot.writeString(struct.executorStartDate);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doRegister_argsTupleSchemeFactory implements SchemeFactory {
      public doRegister_argsTupleScheme getScheme() {
        return new doRegister_argsTupleScheme();
      }
    }

    private static class doRegister_argsTupleScheme extends TupleScheme<doRegister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClusterID()) {
          optionals.set(0);
        }
        if (struct.isSetRegisterTimestamp()) {
          optionals.set(1);
        }
        if (struct.isSetExecutorStartDate()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClusterID()) {
          oprot.writeString(struct.clusterID);
        }
        if (struct.isSetRegisterTimestamp()) {
          oprot.writeI64(struct.registerTimestamp);
        }
        if (struct.isSetExecutorStartDate()) {
          oprot.writeString(struct.executorStartDate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clusterID = iprot.readString();
          struct.setClusterIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.registerTimestamp = iprot.readI64();
          struct.setRegisterTimestampIsSet(true);
        }
        if (incoming.get(2)) {
          struct.executorStartDate = iprot.readString();
          struct.setExecutorStartDateIsSet(true);
        }
      }
    }

  }

  public static class doRegister_result implements org.apache.thrift.TBase<doRegister_result, doRegister_result._Fields>, java.io.Serializable, Cloneable, Comparable<doRegister_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doRegister_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doRegister_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doRegister_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doRegister_result.class, metaDataMap);
    }

    public doRegister_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doRegister_result(doRegister_result other) {
    }

    public doRegister_result deepCopy() {
      return new doRegister_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doRegister_result)
        return this.equals((doRegister_result)that);
      return false;
    }

    public boolean equals(doRegister_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(doRegister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doRegister_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doRegister_resultStandardSchemeFactory implements SchemeFactory {
      public doRegister_resultStandardScheme getScheme() {
        return new doRegister_resultStandardScheme();
      }
    }

    private static class doRegister_resultStandardScheme extends StandardScheme<doRegister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doRegister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doRegister_resultTupleSchemeFactory implements SchemeFactory {
      public doRegister_resultTupleScheme getScheme() {
        return new doRegister_resultTupleScheme();
      }
    }

    private static class doRegister_resultTupleScheme extends TupleScheme<doRegister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sendHeartbeat_args implements org.apache.thrift.TBase<sendHeartbeat_args, sendHeartbeat_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendHeartbeat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendHeartbeat_args");

    private static final org.apache.thrift.protocol.TField EXECUTOR_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("executorClusterID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROGRESS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("progressList", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField LAST_SEEN_FIELD_DESC = new org.apache.thrift.protocol.TField("lastSeen", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendHeartbeat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendHeartbeat_argsTupleSchemeFactory());
    }

    public String executorClusterID; // required
    public List<JobProgress> progressList; // required
    public long lastSeen; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXECUTOR_CLUSTER_ID((short)1, "executorClusterID"),
      PROGRESS_LIST((short)2, "progressList"),
      LAST_SEEN((short)3, "lastSeen");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXECUTOR_CLUSTER_ID
            return EXECUTOR_CLUSTER_ID;
          case 2: // PROGRESS_LIST
            return PROGRESS_LIST;
          case 3: // LAST_SEEN
            return LAST_SEEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LASTSEEN_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXECUTOR_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("executorClusterID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROGRESS_LIST, new org.apache.thrift.meta_data.FieldMetaData("progressList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobProgress.class))));
      tmpMap.put(_Fields.LAST_SEEN, new org.apache.thrift.meta_data.FieldMetaData("lastSeen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendHeartbeat_args.class, metaDataMap);
    }

    public sendHeartbeat_args() {
    }

    public sendHeartbeat_args(
      String executorClusterID,
      List<JobProgress> progressList,
      long lastSeen)
    {
      this();
      this.executorClusterID = executorClusterID;
      this.progressList = progressList;
      this.lastSeen = lastSeen;
      setLastSeenIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendHeartbeat_args(sendHeartbeat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetExecutorClusterID()) {
        this.executorClusterID = other.executorClusterID;
      }
      if (other.isSetProgressList()) {
        List<JobProgress> __this__progressList = new ArrayList<JobProgress>(other.progressList.size());
        for (JobProgress other_element : other.progressList) {
          __this__progressList.add(new JobProgress(other_element));
        }
        this.progressList = __this__progressList;
      }
      this.lastSeen = other.lastSeen;
    }

    public sendHeartbeat_args deepCopy() {
      return new sendHeartbeat_args(this);
    }

    @Override
    public void clear() {
      this.executorClusterID = null;
      this.progressList = null;
      setLastSeenIsSet(false);
      this.lastSeen = 0;
    }

    public String getExecutorClusterID() {
      return this.executorClusterID;
    }

    public sendHeartbeat_args setExecutorClusterID(String executorClusterID) {
      this.executorClusterID = executorClusterID;
      return this;
    }

    public void unsetExecutorClusterID() {
      this.executorClusterID = null;
    }

    /** Returns true if field executorClusterID is set (has been assigned a value) and false otherwise */
    public boolean isSetExecutorClusterID() {
      return this.executorClusterID != null;
    }

    public void setExecutorClusterIDIsSet(boolean value) {
      if (!value) {
        this.executorClusterID = null;
      }
    }

    public int getProgressListSize() {
      return (this.progressList == null) ? 0 : this.progressList.size();
    }

    public java.util.Iterator<JobProgress> getProgressListIterator() {
      return (this.progressList == null) ? null : this.progressList.iterator();
    }

    public void addToProgressList(JobProgress elem) {
      if (this.progressList == null) {
        this.progressList = new ArrayList<JobProgress>();
      }
      this.progressList.add(elem);
    }

    public List<JobProgress> getProgressList() {
      return this.progressList;
    }

    public sendHeartbeat_args setProgressList(List<JobProgress> progressList) {
      this.progressList = progressList;
      return this;
    }

    public void unsetProgressList() {
      this.progressList = null;
    }

    /** Returns true if field progressList is set (has been assigned a value) and false otherwise */
    public boolean isSetProgressList() {
      return this.progressList != null;
    }

    public void setProgressListIsSet(boolean value) {
      if (!value) {
        this.progressList = null;
      }
    }

    public long getLastSeen() {
      return this.lastSeen;
    }

    public sendHeartbeat_args setLastSeen(long lastSeen) {
      this.lastSeen = lastSeen;
      setLastSeenIsSet(true);
      return this;
    }

    public void unsetLastSeen() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTSEEN_ISSET_ID);
    }

    /** Returns true if field lastSeen is set (has been assigned a value) and false otherwise */
    public boolean isSetLastSeen() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTSEEN_ISSET_ID);
    }

    public void setLastSeenIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTSEEN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXECUTOR_CLUSTER_ID:
        if (value == null) {
          unsetExecutorClusterID();
        } else {
          setExecutorClusterID((String)value);
        }
        break;

      case PROGRESS_LIST:
        if (value == null) {
          unsetProgressList();
        } else {
          setProgressList((List<JobProgress>)value);
        }
        break;

      case LAST_SEEN:
        if (value == null) {
          unsetLastSeen();
        } else {
          setLastSeen((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXECUTOR_CLUSTER_ID:
        return getExecutorClusterID();

      case PROGRESS_LIST:
        return getProgressList();

      case LAST_SEEN:
        return Long.valueOf(getLastSeen());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXECUTOR_CLUSTER_ID:
        return isSetExecutorClusterID();
      case PROGRESS_LIST:
        return isSetProgressList();
      case LAST_SEEN:
        return isSetLastSeen();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendHeartbeat_args)
        return this.equals((sendHeartbeat_args)that);
      return false;
    }

    public boolean equals(sendHeartbeat_args that) {
      if (that == null)
        return false;

      boolean this_present_executorClusterID = true && this.isSetExecutorClusterID();
      boolean that_present_executorClusterID = true && that.isSetExecutorClusterID();
      if (this_present_executorClusterID || that_present_executorClusterID) {
        if (!(this_present_executorClusterID && that_present_executorClusterID))
          return false;
        if (!this.executorClusterID.equals(that.executorClusterID))
          return false;
      }

      boolean this_present_progressList = true && this.isSetProgressList();
      boolean that_present_progressList = true && that.isSetProgressList();
      if (this_present_progressList || that_present_progressList) {
        if (!(this_present_progressList && that_present_progressList))
          return false;
        if (!this.progressList.equals(that.progressList))
          return false;
      }

      boolean this_present_lastSeen = true;
      boolean that_present_lastSeen = true;
      if (this_present_lastSeen || that_present_lastSeen) {
        if (!(this_present_lastSeen && that_present_lastSeen))
          return false;
        if (this.lastSeen != that.lastSeen)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendHeartbeat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExecutorClusterID()).compareTo(other.isSetExecutorClusterID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecutorClusterID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executorClusterID, other.executorClusterID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProgressList()).compareTo(other.isSetProgressList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProgressList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progressList, other.progressList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLastSeen()).compareTo(other.isSetLastSeen());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastSeen()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastSeen, other.lastSeen);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendHeartbeat_args(");
      boolean first = true;

      sb.append("executorClusterID:");
      if (this.executorClusterID == null) {
        sb.append("null");
      } else {
        sb.append(this.executorClusterID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("progressList:");
      if (this.progressList == null) {
        sb.append("null");
      } else {
        sb.append(this.progressList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastSeen:");
      sb.append(this.lastSeen);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendHeartbeat_argsStandardSchemeFactory implements SchemeFactory {
      public sendHeartbeat_argsStandardScheme getScheme() {
        return new sendHeartbeat_argsStandardScheme();
      }
    }

    private static class sendHeartbeat_argsStandardScheme extends StandardScheme<sendHeartbeat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendHeartbeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXECUTOR_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.executorClusterID = iprot.readString();
                struct.setExecutorClusterIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROGRESS_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.progressList = new ArrayList<JobProgress>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    JobProgress _elem10;
                    _elem10 = new JobProgress();
                    _elem10.read(iprot);
                    struct.progressList.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setProgressListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LAST_SEEN
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastSeen = iprot.readI64();
                struct.setLastSeenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendHeartbeat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.executorClusterID != null) {
          oprot.writeFieldBegin(EXECUTOR_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.executorClusterID);
          oprot.writeFieldEnd();
        }
        if (struct.progressList != null) {
          oprot.writeFieldBegin(PROGRESS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.progressList.size()));
            for (JobProgress _iter11 : struct.progressList)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LAST_SEEN_FIELD_DESC);
        oprot.writeI64(struct.lastSeen);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendHeartbeat_argsTupleSchemeFactory implements SchemeFactory {
      public sendHeartbeat_argsTupleScheme getScheme() {
        return new sendHeartbeat_argsTupleScheme();
      }
    }

    private static class sendHeartbeat_argsTupleScheme extends TupleScheme<sendHeartbeat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendHeartbeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExecutorClusterID()) {
          optionals.set(0);
        }
        if (struct.isSetProgressList()) {
          optionals.set(1);
        }
        if (struct.isSetLastSeen()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetExecutorClusterID()) {
          oprot.writeString(struct.executorClusterID);
        }
        if (struct.isSetProgressList()) {
          {
            oprot.writeI32(struct.progressList.size());
            for (JobProgress _iter12 : struct.progressList)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetLastSeen()) {
          oprot.writeI64(struct.lastSeen);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendHeartbeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.executorClusterID = iprot.readString();
          struct.setExecutorClusterIDIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.progressList = new ArrayList<JobProgress>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              JobProgress _elem15;
              _elem15 = new JobProgress();
              _elem15.read(iprot);
              struct.progressList.add(_elem15);
            }
          }
          struct.setProgressListIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lastSeen = iprot.readI64();
          struct.setLastSeenIsSet(true);
        }
      }
    }

  }

  public static class sendHeartbeat_result implements org.apache.thrift.TBase<sendHeartbeat_result, sendHeartbeat_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendHeartbeat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendHeartbeat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendHeartbeat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendHeartbeat_resultTupleSchemeFactory());
    }

    public HeartbeatResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HeartbeatResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendHeartbeat_result.class, metaDataMap);
    }

    public sendHeartbeat_result() {
    }

    public sendHeartbeat_result(
      HeartbeatResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendHeartbeat_result(sendHeartbeat_result other) {
      if (other.isSetSuccess()) {
        this.success = new HeartbeatResponse(other.success);
      }
    }

    public sendHeartbeat_result deepCopy() {
      return new sendHeartbeat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public HeartbeatResponse getSuccess() {
      return this.success;
    }

    public sendHeartbeat_result setSuccess(HeartbeatResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HeartbeatResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendHeartbeat_result)
        return this.equals((sendHeartbeat_result)that);
      return false;
    }

    public boolean equals(sendHeartbeat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendHeartbeat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendHeartbeat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendHeartbeat_resultStandardSchemeFactory implements SchemeFactory {
      public sendHeartbeat_resultStandardScheme getScheme() {
        return new sendHeartbeat_resultStandardScheme();
      }
    }

    private static class sendHeartbeat_resultStandardScheme extends StandardScheme<sendHeartbeat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendHeartbeat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HeartbeatResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendHeartbeat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendHeartbeat_resultTupleSchemeFactory implements SchemeFactory {
      public sendHeartbeat_resultTupleScheme getScheme() {
        return new sendHeartbeat_resultTupleScheme();
      }
    }

    private static class sendHeartbeat_resultTupleScheme extends TupleScheme<sendHeartbeat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendHeartbeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendHeartbeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HeartbeatResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isEngineAlive_args implements org.apache.thrift.TBase<isEngineAlive_args, isEngineAlive_args._Fields>, java.io.Serializable, Cloneable, Comparable<isEngineAlive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isEngineAlive_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isEngineAlive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isEngineAlive_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isEngineAlive_args.class, metaDataMap);
    }

    public isEngineAlive_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isEngineAlive_args(isEngineAlive_args other) {
    }

    public isEngineAlive_args deepCopy() {
      return new isEngineAlive_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isEngineAlive_args)
        return this.equals((isEngineAlive_args)that);
      return false;
    }

    public boolean equals(isEngineAlive_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(isEngineAlive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isEngineAlive_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isEngineAlive_argsStandardSchemeFactory implements SchemeFactory {
      public isEngineAlive_argsStandardScheme getScheme() {
        return new isEngineAlive_argsStandardScheme();
      }
    }

    private static class isEngineAlive_argsStandardScheme extends StandardScheme<isEngineAlive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isEngineAlive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isEngineAlive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isEngineAlive_argsTupleSchemeFactory implements SchemeFactory {
      public isEngineAlive_argsTupleScheme getScheme() {
        return new isEngineAlive_argsTupleScheme();
      }
    }

    private static class isEngineAlive_argsTupleScheme extends TupleScheme<isEngineAlive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isEngineAlive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isEngineAlive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class isEngineAlive_result implements org.apache.thrift.TBase<isEngineAlive_result, isEngineAlive_result._Fields>, java.io.Serializable, Cloneable, Comparable<isEngineAlive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isEngineAlive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isEngineAlive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isEngineAlive_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isEngineAlive_result.class, metaDataMap);
    }

    public isEngineAlive_result() {
    }

    public isEngineAlive_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isEngineAlive_result(isEngineAlive_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isEngineAlive_result deepCopy() {
      return new isEngineAlive_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isEngineAlive_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isEngineAlive_result)
        return this.equals((isEngineAlive_result)that);
      return false;
    }

    public boolean equals(isEngineAlive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(isEngineAlive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isEngineAlive_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isEngineAlive_resultStandardSchemeFactory implements SchemeFactory {
      public isEngineAlive_resultStandardScheme getScheme() {
        return new isEngineAlive_resultStandardScheme();
      }
    }

    private static class isEngineAlive_resultStandardScheme extends StandardScheme<isEngineAlive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isEngineAlive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isEngineAlive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isEngineAlive_resultTupleSchemeFactory implements SchemeFactory {
      public isEngineAlive_resultTupleScheme getScheme() {
        return new isEngineAlive_resultTupleScheme();
      }
    }

    private static class isEngineAlive_resultTupleScheme extends TupleScheme<isEngineAlive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isEngineAlive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isEngineAlive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
