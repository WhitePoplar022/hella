/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zhangyue.hella.common.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JobProgress implements org.apache.thrift.TBase<JobProgress, JobProgress._Fields>, java.io.Serializable, Cloneable, Comparable<JobProgress> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobProgress");

  private static final org.apache.thrift.protocol.TField EXECUTOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("executorType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_PLAN_NODE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobPlanNodeState", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventID", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RUN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("runInfo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RUN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("runTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField XJOB_STATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("xjobStateID", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobProgressStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JobProgressTupleSchemeFactory());
  }

  public String executorType; // required
  public String jobPlanNodeState; // required
  public int progress; // required
  public String eventID; // required
  public String runInfo; // optional
  public String runTime; // optional
  public int xjobStateID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXECUTOR_TYPE((short)1, "executorType"),
    JOB_PLAN_NODE_STATE((short)4, "jobPlanNodeState"),
    PROGRESS((short)5, "progress"),
    EVENT_ID((short)6, "eventID"),
    RUN_INFO((short)7, "runInfo"),
    RUN_TIME((short)8, "runTime"),
    XJOB_STATE_ID((short)9, "xjobStateID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXECUTOR_TYPE
          return EXECUTOR_TYPE;
        case 4: // JOB_PLAN_NODE_STATE
          return JOB_PLAN_NODE_STATE;
        case 5: // PROGRESS
          return PROGRESS;
        case 6: // EVENT_ID
          return EVENT_ID;
        case 7: // RUN_INFO
          return RUN_INFO;
        case 8: // RUN_TIME
          return RUN_TIME;
        case 9: // XJOB_STATE_ID
          return XJOB_STATE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROGRESS_ISSET_ID = 0;
  private static final int __XJOBSTATEID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RUN_INFO,_Fields.RUN_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXECUTOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("executorType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_PLAN_NODE_STATE, new org.apache.thrift.meta_data.FieldMetaData("jobPlanNodeState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUN_INFO, new org.apache.thrift.meta_data.FieldMetaData("runInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUN_TIME, new org.apache.thrift.meta_data.FieldMetaData("runTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XJOB_STATE_ID, new org.apache.thrift.meta_data.FieldMetaData("xjobStateID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobProgress.class, metaDataMap);
  }

  public JobProgress() {
  }

  public JobProgress(
    String executorType,
    String jobPlanNodeState,
    int progress,
    String eventID,
    int xjobStateID)
  {
    this();
    this.executorType = executorType;
    this.jobPlanNodeState = jobPlanNodeState;
    this.progress = progress;
    setProgressIsSet(true);
    this.eventID = eventID;
    this.xjobStateID = xjobStateID;
    setXjobStateIDIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobProgress(JobProgress other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetExecutorType()) {
      this.executorType = other.executorType;
    }
    if (other.isSetJobPlanNodeState()) {
      this.jobPlanNodeState = other.jobPlanNodeState;
    }
    this.progress = other.progress;
    if (other.isSetEventID()) {
      this.eventID = other.eventID;
    }
    if (other.isSetRunInfo()) {
      this.runInfo = other.runInfo;
    }
    if (other.isSetRunTime()) {
      this.runTime = other.runTime;
    }
    this.xjobStateID = other.xjobStateID;
  }

  public JobProgress deepCopy() {
    return new JobProgress(this);
  }

  @Override
  public void clear() {
    this.executorType = null;
    this.jobPlanNodeState = null;
    setProgressIsSet(false);
    this.progress = 0;
    this.eventID = null;
    this.runInfo = null;
    this.runTime = null;
    setXjobStateIDIsSet(false);
    this.xjobStateID = 0;
  }

  public String getExecutorType() {
    return this.executorType;
  }

  public JobProgress setExecutorType(String executorType) {
    this.executorType = executorType;
    return this;
  }

  public void unsetExecutorType() {
    this.executorType = null;
  }

  /** Returns true if field executorType is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutorType() {
    return this.executorType != null;
  }

  public void setExecutorTypeIsSet(boolean value) {
    if (!value) {
      this.executorType = null;
    }
  }

  public String getJobPlanNodeState() {
    return this.jobPlanNodeState;
  }

  public JobProgress setJobPlanNodeState(String jobPlanNodeState) {
    this.jobPlanNodeState = jobPlanNodeState;
    return this;
  }

  public void unsetJobPlanNodeState() {
    this.jobPlanNodeState = null;
  }

  /** Returns true if field jobPlanNodeState is set (has been assigned a value) and false otherwise */
  public boolean isSetJobPlanNodeState() {
    return this.jobPlanNodeState != null;
  }

  public void setJobPlanNodeStateIsSet(boolean value) {
    if (!value) {
      this.jobPlanNodeState = null;
    }
  }

  public int getProgress() {
    return this.progress;
  }

  public JobProgress setProgress(int progress) {
    this.progress = progress;
    setProgressIsSet(true);
    return this;
  }

  public void unsetProgress() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROGRESS_ISSET_ID);
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return EncodingUtils.testBit(__isset_bitfield, __PROGRESS_ISSET_ID);
  }

  public void setProgressIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROGRESS_ISSET_ID, value);
  }

  public String getEventID() {
    return this.eventID;
  }

  public JobProgress setEventID(String eventID) {
    this.eventID = eventID;
    return this;
  }

  public void unsetEventID() {
    this.eventID = null;
  }

  /** Returns true if field eventID is set (has been assigned a value) and false otherwise */
  public boolean isSetEventID() {
    return this.eventID != null;
  }

  public void setEventIDIsSet(boolean value) {
    if (!value) {
      this.eventID = null;
    }
  }

  public String getRunInfo() {
    return this.runInfo;
  }

  public JobProgress setRunInfo(String runInfo) {
    this.runInfo = runInfo;
    return this;
  }

  public void unsetRunInfo() {
    this.runInfo = null;
  }

  /** Returns true if field runInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetRunInfo() {
    return this.runInfo != null;
  }

  public void setRunInfoIsSet(boolean value) {
    if (!value) {
      this.runInfo = null;
    }
  }

  public String getRunTime() {
    return this.runTime;
  }

  public JobProgress setRunTime(String runTime) {
    this.runTime = runTime;
    return this;
  }

  public void unsetRunTime() {
    this.runTime = null;
  }

  /** Returns true if field runTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRunTime() {
    return this.runTime != null;
  }

  public void setRunTimeIsSet(boolean value) {
    if (!value) {
      this.runTime = null;
    }
  }

  public int getXjobStateID() {
    return this.xjobStateID;
  }

  public JobProgress setXjobStateID(int xjobStateID) {
    this.xjobStateID = xjobStateID;
    setXjobStateIDIsSet(true);
    return this;
  }

  public void unsetXjobStateID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __XJOBSTATEID_ISSET_ID);
  }

  /** Returns true if field xjobStateID is set (has been assigned a value) and false otherwise */
  public boolean isSetXjobStateID() {
    return EncodingUtils.testBit(__isset_bitfield, __XJOBSTATEID_ISSET_ID);
  }

  public void setXjobStateIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __XJOBSTATEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXECUTOR_TYPE:
      if (value == null) {
        unsetExecutorType();
      } else {
        setExecutorType((String)value);
      }
      break;

    case JOB_PLAN_NODE_STATE:
      if (value == null) {
        unsetJobPlanNodeState();
      } else {
        setJobPlanNodeState((String)value);
      }
      break;

    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((Integer)value);
      }
      break;

    case EVENT_ID:
      if (value == null) {
        unsetEventID();
      } else {
        setEventID((String)value);
      }
      break;

    case RUN_INFO:
      if (value == null) {
        unsetRunInfo();
      } else {
        setRunInfo((String)value);
      }
      break;

    case RUN_TIME:
      if (value == null) {
        unsetRunTime();
      } else {
        setRunTime((String)value);
      }
      break;

    case XJOB_STATE_ID:
      if (value == null) {
        unsetXjobStateID();
      } else {
        setXjobStateID((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXECUTOR_TYPE:
      return getExecutorType();

    case JOB_PLAN_NODE_STATE:
      return getJobPlanNodeState();

    case PROGRESS:
      return Integer.valueOf(getProgress());

    case EVENT_ID:
      return getEventID();

    case RUN_INFO:
      return getRunInfo();

    case RUN_TIME:
      return getRunTime();

    case XJOB_STATE_ID:
      return Integer.valueOf(getXjobStateID());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXECUTOR_TYPE:
      return isSetExecutorType();
    case JOB_PLAN_NODE_STATE:
      return isSetJobPlanNodeState();
    case PROGRESS:
      return isSetProgress();
    case EVENT_ID:
      return isSetEventID();
    case RUN_INFO:
      return isSetRunInfo();
    case RUN_TIME:
      return isSetRunTime();
    case XJOB_STATE_ID:
      return isSetXjobStateID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobProgress)
      return this.equals((JobProgress)that);
    return false;
  }

  public boolean equals(JobProgress that) {
    if (that == null)
      return false;

    boolean this_present_executorType = true && this.isSetExecutorType();
    boolean that_present_executorType = true && that.isSetExecutorType();
    if (this_present_executorType || that_present_executorType) {
      if (!(this_present_executorType && that_present_executorType))
        return false;
      if (!this.executorType.equals(that.executorType))
        return false;
    }

    boolean this_present_jobPlanNodeState = true && this.isSetJobPlanNodeState();
    boolean that_present_jobPlanNodeState = true && that.isSetJobPlanNodeState();
    if (this_present_jobPlanNodeState || that_present_jobPlanNodeState) {
      if (!(this_present_jobPlanNodeState && that_present_jobPlanNodeState))
        return false;
      if (!this.jobPlanNodeState.equals(that.jobPlanNodeState))
        return false;
    }

    boolean this_present_progress = true;
    boolean that_present_progress = true;
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (this.progress != that.progress)
        return false;
    }

    boolean this_present_eventID = true && this.isSetEventID();
    boolean that_present_eventID = true && that.isSetEventID();
    if (this_present_eventID || that_present_eventID) {
      if (!(this_present_eventID && that_present_eventID))
        return false;
      if (!this.eventID.equals(that.eventID))
        return false;
    }

    boolean this_present_runInfo = true && this.isSetRunInfo();
    boolean that_present_runInfo = true && that.isSetRunInfo();
    if (this_present_runInfo || that_present_runInfo) {
      if (!(this_present_runInfo && that_present_runInfo))
        return false;
      if (!this.runInfo.equals(that.runInfo))
        return false;
    }

    boolean this_present_runTime = true && this.isSetRunTime();
    boolean that_present_runTime = true && that.isSetRunTime();
    if (this_present_runTime || that_present_runTime) {
      if (!(this_present_runTime && that_present_runTime))
        return false;
      if (!this.runTime.equals(that.runTime))
        return false;
    }

    boolean this_present_xjobStateID = true;
    boolean that_present_xjobStateID = true;
    if (this_present_xjobStateID || that_present_xjobStateID) {
      if (!(this_present_xjobStateID && that_present_xjobStateID))
        return false;
      if (this.xjobStateID != that.xjobStateID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(JobProgress other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExecutorType()).compareTo(other.isSetExecutorType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutorType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executorType, other.executorType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobPlanNodeState()).compareTo(other.isSetJobPlanNodeState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobPlanNodeState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobPlanNodeState, other.jobPlanNodeState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgress()).compareTo(other.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, other.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventID()).compareTo(other.isSetEventID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventID, other.eventID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunInfo()).compareTo(other.isSetRunInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runInfo, other.runInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunTime()).compareTo(other.isSetRunTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runTime, other.runTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXjobStateID()).compareTo(other.isSetXjobStateID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXjobStateID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xjobStateID, other.xjobStateID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobProgress(");
    boolean first = true;

    sb.append("executorType:");
    if (this.executorType == null) {
      sb.append("null");
    } else {
      sb.append(this.executorType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobPlanNodeState:");
    if (this.jobPlanNodeState == null) {
      sb.append("null");
    } else {
      sb.append(this.jobPlanNodeState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("progress:");
    sb.append(this.progress);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventID:");
    if (this.eventID == null) {
      sb.append("null");
    } else {
      sb.append(this.eventID);
    }
    first = false;
    if (isSetRunInfo()) {
      if (!first) sb.append(", ");
      sb.append("runInfo:");
      if (this.runInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.runInfo);
      }
      first = false;
    }
    if (isSetRunTime()) {
      if (!first) sb.append(", ");
      sb.append("runTime:");
      if (this.runTime == null) {
        sb.append("null");
      } else {
        sb.append(this.runTime);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("xjobStateID:");
    sb.append(this.xjobStateID);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (executorType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executorType' was not present! Struct: " + toString());
    }
    if (jobPlanNodeState == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobPlanNodeState' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'progress' because it's a primitive and you chose the non-beans generator.
    if (eventID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventID' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'xjobStateID' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobProgressStandardSchemeFactory implements SchemeFactory {
    public JobProgressStandardScheme getScheme() {
      return new JobProgressStandardScheme();
    }
  }

  private static class JobProgressStandardScheme extends StandardScheme<JobProgress> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobProgress struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXECUTOR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executorType = iprot.readString();
              struct.setExecutorTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JOB_PLAN_NODE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobPlanNodeState = iprot.readString();
              struct.setJobPlanNodeStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.progress = iprot.readI32();
              struct.setProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventID = iprot.readString();
              struct.setEventIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RUN_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runInfo = iprot.readString();
              struct.setRunInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RUN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runTime = iprot.readString();
              struct.setRunTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // XJOB_STATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.xjobStateID = iprot.readI32();
              struct.setXjobStateIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetProgress()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'progress' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetXjobStateID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'xjobStateID' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobProgress struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.executorType != null) {
        oprot.writeFieldBegin(EXECUTOR_TYPE_FIELD_DESC);
        oprot.writeString(struct.executorType);
        oprot.writeFieldEnd();
      }
      if (struct.jobPlanNodeState != null) {
        oprot.writeFieldBegin(JOB_PLAN_NODE_STATE_FIELD_DESC);
        oprot.writeString(struct.jobPlanNodeState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
      oprot.writeI32(struct.progress);
      oprot.writeFieldEnd();
      if (struct.eventID != null) {
        oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
        oprot.writeString(struct.eventID);
        oprot.writeFieldEnd();
      }
      if (struct.runInfo != null) {
        if (struct.isSetRunInfo()) {
          oprot.writeFieldBegin(RUN_INFO_FIELD_DESC);
          oprot.writeString(struct.runInfo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.runTime != null) {
        if (struct.isSetRunTime()) {
          oprot.writeFieldBegin(RUN_TIME_FIELD_DESC);
          oprot.writeString(struct.runTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(XJOB_STATE_ID_FIELD_DESC);
      oprot.writeI32(struct.xjobStateID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobProgressTupleSchemeFactory implements SchemeFactory {
    public JobProgressTupleScheme getScheme() {
      return new JobProgressTupleScheme();
    }
  }

  private static class JobProgressTupleScheme extends TupleScheme<JobProgress> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobProgress struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.executorType);
      oprot.writeString(struct.jobPlanNodeState);
      oprot.writeI32(struct.progress);
      oprot.writeString(struct.eventID);
      oprot.writeI32(struct.xjobStateID);
      BitSet optionals = new BitSet();
      if (struct.isSetRunInfo()) {
        optionals.set(0);
      }
      if (struct.isSetRunTime()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRunInfo()) {
        oprot.writeString(struct.runInfo);
      }
      if (struct.isSetRunTime()) {
        oprot.writeString(struct.runTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobProgress struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.executorType = iprot.readString();
      struct.setExecutorTypeIsSet(true);
      struct.jobPlanNodeState = iprot.readString();
      struct.setJobPlanNodeStateIsSet(true);
      struct.progress = iprot.readI32();
      struct.setProgressIsSet(true);
      struct.eventID = iprot.readString();
      struct.setEventIDIsSet(true);
      struct.xjobStateID = iprot.readI32();
      struct.setXjobStateIDIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.runInfo = iprot.readString();
        struct.setRunInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.runTime = iprot.readString();
        struct.setRunTimeIsSet(true);
      }
    }
  }

}

