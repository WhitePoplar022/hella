/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zhangyue.hella.common.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HeartbeatResponse implements org.apache.thrift.TBase<HeartbeatResponse, HeartbeatResponse._Fields>, java.io.Serializable, Cloneable, Comparable<HeartbeatResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HeartbeatResponse");

  private static final org.apache.thrift.protocol.TField EXECUTOR_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("executorStatus", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobEvents", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HeartbeatResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HeartbeatResponseTupleSchemeFactory());
  }

  public int executorStatus; // required
  public List<JobEvent> jobEvents; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXECUTOR_STATUS((short)1, "executorStatus"),
    JOB_EVENTS((short)2, "jobEvents");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXECUTOR_STATUS
          return EXECUTOR_STATUS;
        case 2: // JOB_EVENTS
          return JOB_EVENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECUTORSTATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.JOB_EVENTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXECUTOR_STATUS, new org.apache.thrift.meta_data.FieldMetaData("executorStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JOB_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("jobEvents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobEvent.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HeartbeatResponse.class, metaDataMap);
  }

  public HeartbeatResponse() {
  }

  public HeartbeatResponse(
    int executorStatus)
  {
    this();
    this.executorStatus = executorStatus;
    setExecutorStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HeartbeatResponse(HeartbeatResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.executorStatus = other.executorStatus;
    if (other.isSetJobEvents()) {
      List<JobEvent> __this__jobEvents = new ArrayList<JobEvent>(other.jobEvents.size());
      for (JobEvent other_element : other.jobEvents) {
        __this__jobEvents.add(new JobEvent(other_element));
      }
      this.jobEvents = __this__jobEvents;
    }
  }

  public HeartbeatResponse deepCopy() {
    return new HeartbeatResponse(this);
  }

  @Override
  public void clear() {
    setExecutorStatusIsSet(false);
    this.executorStatus = 0;
    this.jobEvents = null;
  }

  public int getExecutorStatus() {
    return this.executorStatus;
  }

  public HeartbeatResponse setExecutorStatus(int executorStatus) {
    this.executorStatus = executorStatus;
    setExecutorStatusIsSet(true);
    return this;
  }

  public void unsetExecutorStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECUTORSTATUS_ISSET_ID);
  }

  /** Returns true if field executorStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutorStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECUTORSTATUS_ISSET_ID);
  }

  public void setExecutorStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECUTORSTATUS_ISSET_ID, value);
  }

  public int getJobEventsSize() {
    return (this.jobEvents == null) ? 0 : this.jobEvents.size();
  }

  public java.util.Iterator<JobEvent> getJobEventsIterator() {
    return (this.jobEvents == null) ? null : this.jobEvents.iterator();
  }

  public void addToJobEvents(JobEvent elem) {
    if (this.jobEvents == null) {
      this.jobEvents = new ArrayList<JobEvent>();
    }
    this.jobEvents.add(elem);
  }

  public List<JobEvent> getJobEvents() {
    return this.jobEvents;
  }

  public HeartbeatResponse setJobEvents(List<JobEvent> jobEvents) {
    this.jobEvents = jobEvents;
    return this;
  }

  public void unsetJobEvents() {
    this.jobEvents = null;
  }

  /** Returns true if field jobEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetJobEvents() {
    return this.jobEvents != null;
  }

  public void setJobEventsIsSet(boolean value) {
    if (!value) {
      this.jobEvents = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXECUTOR_STATUS:
      if (value == null) {
        unsetExecutorStatus();
      } else {
        setExecutorStatus((Integer)value);
      }
      break;

    case JOB_EVENTS:
      if (value == null) {
        unsetJobEvents();
      } else {
        setJobEvents((List<JobEvent>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXECUTOR_STATUS:
      return Integer.valueOf(getExecutorStatus());

    case JOB_EVENTS:
      return getJobEvents();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXECUTOR_STATUS:
      return isSetExecutorStatus();
    case JOB_EVENTS:
      return isSetJobEvents();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HeartbeatResponse)
      return this.equals((HeartbeatResponse)that);
    return false;
  }

  public boolean equals(HeartbeatResponse that) {
    if (that == null)
      return false;

    boolean this_present_executorStatus = true;
    boolean that_present_executorStatus = true;
    if (this_present_executorStatus || that_present_executorStatus) {
      if (!(this_present_executorStatus && that_present_executorStatus))
        return false;
      if (this.executorStatus != that.executorStatus)
        return false;
    }

    boolean this_present_jobEvents = true && this.isSetJobEvents();
    boolean that_present_jobEvents = true && that.isSetJobEvents();
    if (this_present_jobEvents || that_present_jobEvents) {
      if (!(this_present_jobEvents && that_present_jobEvents))
        return false;
      if (!this.jobEvents.equals(that.jobEvents))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HeartbeatResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExecutorStatus()).compareTo(other.isSetExecutorStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutorStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executorStatus, other.executorStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobEvents()).compareTo(other.isSetJobEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobEvents, other.jobEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HeartbeatResponse(");
    boolean first = true;

    sb.append("executorStatus:");
    sb.append(this.executorStatus);
    first = false;
    if (isSetJobEvents()) {
      if (!first) sb.append(", ");
      sb.append("jobEvents:");
      if (this.jobEvents == null) {
        sb.append("null");
      } else {
        sb.append(this.jobEvents);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'executorStatus' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HeartbeatResponseStandardSchemeFactory implements SchemeFactory {
    public HeartbeatResponseStandardScheme getScheme() {
      return new HeartbeatResponseStandardScheme();
    }
  }

  private static class HeartbeatResponseStandardScheme extends StandardScheme<HeartbeatResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HeartbeatResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXECUTOR_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.executorStatus = iprot.readI32();
              struct.setExecutorStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.jobEvents = new ArrayList<JobEvent>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  JobEvent _elem2;
                  _elem2 = new JobEvent();
                  _elem2.read(iprot);
                  struct.jobEvents.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setJobEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetExecutorStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'executorStatus' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HeartbeatResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXECUTOR_STATUS_FIELD_DESC);
      oprot.writeI32(struct.executorStatus);
      oprot.writeFieldEnd();
      if (struct.jobEvents != null) {
        if (struct.isSetJobEvents()) {
          oprot.writeFieldBegin(JOB_EVENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jobEvents.size()));
            for (JobEvent _iter3 : struct.jobEvents)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HeartbeatResponseTupleSchemeFactory implements SchemeFactory {
    public HeartbeatResponseTupleScheme getScheme() {
      return new HeartbeatResponseTupleScheme();
    }
  }

  private static class HeartbeatResponseTupleScheme extends TupleScheme<HeartbeatResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HeartbeatResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.executorStatus);
      BitSet optionals = new BitSet();
      if (struct.isSetJobEvents()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetJobEvents()) {
        {
          oprot.writeI32(struct.jobEvents.size());
          for (JobEvent _iter4 : struct.jobEvents)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HeartbeatResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.executorStatus = iprot.readI32();
      struct.setExecutorStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.jobEvents = new ArrayList<JobEvent>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            JobEvent _elem7;
            _elem7 = new JobEvent();
            _elem7.read(iprot);
            struct.jobEvents.add(_elem7);
          }
        }
        struct.setJobEventsIsSet(true);
      }
    }
  }

}

