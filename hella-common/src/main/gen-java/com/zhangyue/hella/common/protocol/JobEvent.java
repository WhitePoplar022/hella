/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zhangyue.hella.common.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JobEvent implements org.apache.thrift.TBase<JobEvent, JobEvent._Fields>, java.io.Serializable, Cloneable, Comparable<JobEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobEvent");

  private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("eventType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXECUTOR_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("executorClusterID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField XJOB_EXECUTOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("xjobExecutorType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXECUTION_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("executionContent", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField JOB_CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("jobClassName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField JOB_PLAN_NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("jobPlanNodeName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EXECUTE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("executeUser", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ARGS_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("argsValue", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JobEventTupleSchemeFactory());
  }

  public int eventType; // required
  public String eventID; // required
  public String executorClusterID; // required
  public String xjobExecutorType; // required
  public String mode; // required
  public String executionContent; // required
  public String jobClassName; // required
  public String jobPlanNodeName; // required
  public String executeUser; // optional
  public String argsValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EVENT_TYPE((short)1, "eventType"),
    EVENT_ID((short)2, "eventID"),
    EXECUTOR_CLUSTER_ID((short)3, "executorClusterID"),
    XJOB_EXECUTOR_TYPE((short)4, "xjobExecutorType"),
    MODE((short)5, "mode"),
    EXECUTION_CONTENT((short)6, "executionContent"),
    JOB_CLASS_NAME((short)7, "jobClassName"),
    JOB_PLAN_NODE_NAME((short)8, "jobPlanNodeName"),
    EXECUTE_USER((short)9, "executeUser"),
    ARGS_VALUE((short)10, "argsValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EVENT_TYPE
          return EVENT_TYPE;
        case 2: // EVENT_ID
          return EVENT_ID;
        case 3: // EXECUTOR_CLUSTER_ID
          return EXECUTOR_CLUSTER_ID;
        case 4: // XJOB_EXECUTOR_TYPE
          return XJOB_EXECUTOR_TYPE;
        case 5: // MODE
          return MODE;
        case 6: // EXECUTION_CONTENT
          return EXECUTION_CONTENT;
        case 7: // JOB_CLASS_NAME
          return JOB_CLASS_NAME;
        case 8: // JOB_PLAN_NODE_NAME
          return JOB_PLAN_NODE_NAME;
        case 9: // EXECUTE_USER
          return EXECUTE_USER;
        case 10: // ARGS_VALUE
          return ARGS_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENTTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.EXECUTE_USER,_Fields.ARGS_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("eventType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTOR_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("executorClusterID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XJOB_EXECUTOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("xjobExecutorType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTION_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("executionContent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("jobClassName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_PLAN_NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("jobPlanNodeName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTE_USER, new org.apache.thrift.meta_data.FieldMetaData("executeUser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARGS_VALUE, new org.apache.thrift.meta_data.FieldMetaData("argsValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobEvent.class, metaDataMap);
  }

  public JobEvent() {
  }

  public JobEvent(
    int eventType,
    String eventID,
    String executorClusterID,
    String xjobExecutorType,
    String mode,
    String executionContent,
    String jobClassName,
    String jobPlanNodeName)
  {
    this();
    this.eventType = eventType;
    setEventTypeIsSet(true);
    this.eventID = eventID;
    this.executorClusterID = executorClusterID;
    this.xjobExecutorType = xjobExecutorType;
    this.mode = mode;
    this.executionContent = executionContent;
    this.jobClassName = jobClassName;
    this.jobPlanNodeName = jobPlanNodeName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobEvent(JobEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.eventType = other.eventType;
    if (other.isSetEventID()) {
      this.eventID = other.eventID;
    }
    if (other.isSetExecutorClusterID()) {
      this.executorClusterID = other.executorClusterID;
    }
    if (other.isSetXjobExecutorType()) {
      this.xjobExecutorType = other.xjobExecutorType;
    }
    if (other.isSetMode()) {
      this.mode = other.mode;
    }
    if (other.isSetExecutionContent()) {
      this.executionContent = other.executionContent;
    }
    if (other.isSetJobClassName()) {
      this.jobClassName = other.jobClassName;
    }
    if (other.isSetJobPlanNodeName()) {
      this.jobPlanNodeName = other.jobPlanNodeName;
    }
    if (other.isSetExecuteUser()) {
      this.executeUser = other.executeUser;
    }
    if (other.isSetArgsValue()) {
      this.argsValue = other.argsValue;
    }
  }

  public JobEvent deepCopy() {
    return new JobEvent(this);
  }

  @Override
  public void clear() {
    setEventTypeIsSet(false);
    this.eventType = 0;
    this.eventID = null;
    this.executorClusterID = null;
    this.xjobExecutorType = null;
    this.mode = null;
    this.executionContent = null;
    this.jobClassName = null;
    this.jobPlanNodeName = null;
    this.executeUser = null;
    this.argsValue = null;
  }

  public int getEventType() {
    return this.eventType;
  }

  public JobEvent setEventType(int eventType) {
    this.eventType = eventType;
    setEventTypeIsSet(true);
    return this;
  }

  public void unsetEventType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTTYPE_ISSET_ID);
  }

  /** Returns true if field eventType is set (has been assigned a value) and false otherwise */
  public boolean isSetEventType() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTTYPE_ISSET_ID);
  }

  public void setEventTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTTYPE_ISSET_ID, value);
  }

  public String getEventID() {
    return this.eventID;
  }

  public JobEvent setEventID(String eventID) {
    this.eventID = eventID;
    return this;
  }

  public void unsetEventID() {
    this.eventID = null;
  }

  /** Returns true if field eventID is set (has been assigned a value) and false otherwise */
  public boolean isSetEventID() {
    return this.eventID != null;
  }

  public void setEventIDIsSet(boolean value) {
    if (!value) {
      this.eventID = null;
    }
  }

  public String getExecutorClusterID() {
    return this.executorClusterID;
  }

  public JobEvent setExecutorClusterID(String executorClusterID) {
    this.executorClusterID = executorClusterID;
    return this;
  }

  public void unsetExecutorClusterID() {
    this.executorClusterID = null;
  }

  /** Returns true if field executorClusterID is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutorClusterID() {
    return this.executorClusterID != null;
  }

  public void setExecutorClusterIDIsSet(boolean value) {
    if (!value) {
      this.executorClusterID = null;
    }
  }

  public String getXjobExecutorType() {
    return this.xjobExecutorType;
  }

  public JobEvent setXjobExecutorType(String xjobExecutorType) {
    this.xjobExecutorType = xjobExecutorType;
    return this;
  }

  public void unsetXjobExecutorType() {
    this.xjobExecutorType = null;
  }

  /** Returns true if field xjobExecutorType is set (has been assigned a value) and false otherwise */
  public boolean isSetXjobExecutorType() {
    return this.xjobExecutorType != null;
  }

  public void setXjobExecutorTypeIsSet(boolean value) {
    if (!value) {
      this.xjobExecutorType = null;
    }
  }

  public String getMode() {
    return this.mode;
  }

  public JobEvent setMode(String mode) {
    this.mode = mode;
    return this;
  }

  public void unsetMode() {
    this.mode = null;
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return this.mode != null;
  }

  public void setModeIsSet(boolean value) {
    if (!value) {
      this.mode = null;
    }
  }

  public String getExecutionContent() {
    return this.executionContent;
  }

  public JobEvent setExecutionContent(String executionContent) {
    this.executionContent = executionContent;
    return this;
  }

  public void unsetExecutionContent() {
    this.executionContent = null;
  }

  /** Returns true if field executionContent is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutionContent() {
    return this.executionContent != null;
  }

  public void setExecutionContentIsSet(boolean value) {
    if (!value) {
      this.executionContent = null;
    }
  }

  public String getJobClassName() {
    return this.jobClassName;
  }

  public JobEvent setJobClassName(String jobClassName) {
    this.jobClassName = jobClassName;
    return this;
  }

  public void unsetJobClassName() {
    this.jobClassName = null;
  }

  /** Returns true if field jobClassName is set (has been assigned a value) and false otherwise */
  public boolean isSetJobClassName() {
    return this.jobClassName != null;
  }

  public void setJobClassNameIsSet(boolean value) {
    if (!value) {
      this.jobClassName = null;
    }
  }

  public String getJobPlanNodeName() {
    return this.jobPlanNodeName;
  }

  public JobEvent setJobPlanNodeName(String jobPlanNodeName) {
    this.jobPlanNodeName = jobPlanNodeName;
    return this;
  }

  public void unsetJobPlanNodeName() {
    this.jobPlanNodeName = null;
  }

  /** Returns true if field jobPlanNodeName is set (has been assigned a value) and false otherwise */
  public boolean isSetJobPlanNodeName() {
    return this.jobPlanNodeName != null;
  }

  public void setJobPlanNodeNameIsSet(boolean value) {
    if (!value) {
      this.jobPlanNodeName = null;
    }
  }

  public String getExecuteUser() {
    return this.executeUser;
  }

  public JobEvent setExecuteUser(String executeUser) {
    this.executeUser = executeUser;
    return this;
  }

  public void unsetExecuteUser() {
    this.executeUser = null;
  }

  /** Returns true if field executeUser is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuteUser() {
    return this.executeUser != null;
  }

  public void setExecuteUserIsSet(boolean value) {
    if (!value) {
      this.executeUser = null;
    }
  }

  public String getArgsValue() {
    return this.argsValue;
  }

  public JobEvent setArgsValue(String argsValue) {
    this.argsValue = argsValue;
    return this;
  }

  public void unsetArgsValue() {
    this.argsValue = null;
  }

  /** Returns true if field argsValue is set (has been assigned a value) and false otherwise */
  public boolean isSetArgsValue() {
    return this.argsValue != null;
  }

  public void setArgsValueIsSet(boolean value) {
    if (!value) {
      this.argsValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EVENT_TYPE:
      if (value == null) {
        unsetEventType();
      } else {
        setEventType((Integer)value);
      }
      break;

    case EVENT_ID:
      if (value == null) {
        unsetEventID();
      } else {
        setEventID((String)value);
      }
      break;

    case EXECUTOR_CLUSTER_ID:
      if (value == null) {
        unsetExecutorClusterID();
      } else {
        setExecutorClusterID((String)value);
      }
      break;

    case XJOB_EXECUTOR_TYPE:
      if (value == null) {
        unsetXjobExecutorType();
      } else {
        setXjobExecutorType((String)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((String)value);
      }
      break;

    case EXECUTION_CONTENT:
      if (value == null) {
        unsetExecutionContent();
      } else {
        setExecutionContent((String)value);
      }
      break;

    case JOB_CLASS_NAME:
      if (value == null) {
        unsetJobClassName();
      } else {
        setJobClassName((String)value);
      }
      break;

    case JOB_PLAN_NODE_NAME:
      if (value == null) {
        unsetJobPlanNodeName();
      } else {
        setJobPlanNodeName((String)value);
      }
      break;

    case EXECUTE_USER:
      if (value == null) {
        unsetExecuteUser();
      } else {
        setExecuteUser((String)value);
      }
      break;

    case ARGS_VALUE:
      if (value == null) {
        unsetArgsValue();
      } else {
        setArgsValue((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EVENT_TYPE:
      return Integer.valueOf(getEventType());

    case EVENT_ID:
      return getEventID();

    case EXECUTOR_CLUSTER_ID:
      return getExecutorClusterID();

    case XJOB_EXECUTOR_TYPE:
      return getXjobExecutorType();

    case MODE:
      return getMode();

    case EXECUTION_CONTENT:
      return getExecutionContent();

    case JOB_CLASS_NAME:
      return getJobClassName();

    case JOB_PLAN_NODE_NAME:
      return getJobPlanNodeName();

    case EXECUTE_USER:
      return getExecuteUser();

    case ARGS_VALUE:
      return getArgsValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EVENT_TYPE:
      return isSetEventType();
    case EVENT_ID:
      return isSetEventID();
    case EXECUTOR_CLUSTER_ID:
      return isSetExecutorClusterID();
    case XJOB_EXECUTOR_TYPE:
      return isSetXjobExecutorType();
    case MODE:
      return isSetMode();
    case EXECUTION_CONTENT:
      return isSetExecutionContent();
    case JOB_CLASS_NAME:
      return isSetJobClassName();
    case JOB_PLAN_NODE_NAME:
      return isSetJobPlanNodeName();
    case EXECUTE_USER:
      return isSetExecuteUser();
    case ARGS_VALUE:
      return isSetArgsValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobEvent)
      return this.equals((JobEvent)that);
    return false;
  }

  public boolean equals(JobEvent that) {
    if (that == null)
      return false;

    boolean this_present_eventType = true;
    boolean that_present_eventType = true;
    if (this_present_eventType || that_present_eventType) {
      if (!(this_present_eventType && that_present_eventType))
        return false;
      if (this.eventType != that.eventType)
        return false;
    }

    boolean this_present_eventID = true && this.isSetEventID();
    boolean that_present_eventID = true && that.isSetEventID();
    if (this_present_eventID || that_present_eventID) {
      if (!(this_present_eventID && that_present_eventID))
        return false;
      if (!this.eventID.equals(that.eventID))
        return false;
    }

    boolean this_present_executorClusterID = true && this.isSetExecutorClusterID();
    boolean that_present_executorClusterID = true && that.isSetExecutorClusterID();
    if (this_present_executorClusterID || that_present_executorClusterID) {
      if (!(this_present_executorClusterID && that_present_executorClusterID))
        return false;
      if (!this.executorClusterID.equals(that.executorClusterID))
        return false;
    }

    boolean this_present_xjobExecutorType = true && this.isSetXjobExecutorType();
    boolean that_present_xjobExecutorType = true && that.isSetXjobExecutorType();
    if (this_present_xjobExecutorType || that_present_xjobExecutorType) {
      if (!(this_present_xjobExecutorType && that_present_xjobExecutorType))
        return false;
      if (!this.xjobExecutorType.equals(that.xjobExecutorType))
        return false;
    }

    boolean this_present_mode = true && this.isSetMode();
    boolean that_present_mode = true && that.isSetMode();
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (!this.mode.equals(that.mode))
        return false;
    }

    boolean this_present_executionContent = true && this.isSetExecutionContent();
    boolean that_present_executionContent = true && that.isSetExecutionContent();
    if (this_present_executionContent || that_present_executionContent) {
      if (!(this_present_executionContent && that_present_executionContent))
        return false;
      if (!this.executionContent.equals(that.executionContent))
        return false;
    }

    boolean this_present_jobClassName = true && this.isSetJobClassName();
    boolean that_present_jobClassName = true && that.isSetJobClassName();
    if (this_present_jobClassName || that_present_jobClassName) {
      if (!(this_present_jobClassName && that_present_jobClassName))
        return false;
      if (!this.jobClassName.equals(that.jobClassName))
        return false;
    }

    boolean this_present_jobPlanNodeName = true && this.isSetJobPlanNodeName();
    boolean that_present_jobPlanNodeName = true && that.isSetJobPlanNodeName();
    if (this_present_jobPlanNodeName || that_present_jobPlanNodeName) {
      if (!(this_present_jobPlanNodeName && that_present_jobPlanNodeName))
        return false;
      if (!this.jobPlanNodeName.equals(that.jobPlanNodeName))
        return false;
    }

    boolean this_present_executeUser = true && this.isSetExecuteUser();
    boolean that_present_executeUser = true && that.isSetExecuteUser();
    if (this_present_executeUser || that_present_executeUser) {
      if (!(this_present_executeUser && that_present_executeUser))
        return false;
      if (!this.executeUser.equals(that.executeUser))
        return false;
    }

    boolean this_present_argsValue = true && this.isSetArgsValue();
    boolean that_present_argsValue = true && that.isSetArgsValue();
    if (this_present_argsValue || that_present_argsValue) {
      if (!(this_present_argsValue && that_present_argsValue))
        return false;
      if (!this.argsValue.equals(that.argsValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(JobEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEventType()).compareTo(other.isSetEventType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventType, other.eventType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventID()).compareTo(other.isSetEventID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventID, other.eventID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutorClusterID()).compareTo(other.isSetExecutorClusterID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutorClusterID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executorClusterID, other.executorClusterID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXjobExecutorType()).compareTo(other.isSetXjobExecutorType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXjobExecutorType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xjobExecutorType, other.xjobExecutorType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutionContent()).compareTo(other.isSetExecutionContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutionContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executionContent, other.executionContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobClassName()).compareTo(other.isSetJobClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobClassName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobClassName, other.jobClassName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobPlanNodeName()).compareTo(other.isSetJobPlanNodeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobPlanNodeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobPlanNodeName, other.jobPlanNodeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecuteUser()).compareTo(other.isSetExecuteUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuteUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executeUser, other.executeUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArgsValue()).compareTo(other.isSetArgsValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgsValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argsValue, other.argsValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobEvent(");
    boolean first = true;

    sb.append("eventType:");
    sb.append(this.eventType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventID:");
    if (this.eventID == null) {
      sb.append("null");
    } else {
      sb.append(this.eventID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executorClusterID:");
    if (this.executorClusterID == null) {
      sb.append("null");
    } else {
      sb.append(this.executorClusterID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xjobExecutorType:");
    if (this.xjobExecutorType == null) {
      sb.append("null");
    } else {
      sb.append(this.xjobExecutorType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mode:");
    if (this.mode == null) {
      sb.append("null");
    } else {
      sb.append(this.mode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executionContent:");
    if (this.executionContent == null) {
      sb.append("null");
    } else {
      sb.append(this.executionContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobClassName:");
    if (this.jobClassName == null) {
      sb.append("null");
    } else {
      sb.append(this.jobClassName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobPlanNodeName:");
    if (this.jobPlanNodeName == null) {
      sb.append("null");
    } else {
      sb.append(this.jobPlanNodeName);
    }
    first = false;
    if (isSetExecuteUser()) {
      if (!first) sb.append(", ");
      sb.append("executeUser:");
      if (this.executeUser == null) {
        sb.append("null");
      } else {
        sb.append(this.executeUser);
      }
      first = false;
    }
    if (isSetArgsValue()) {
      if (!first) sb.append(", ");
      sb.append("argsValue:");
      if (this.argsValue == null) {
        sb.append("null");
      } else {
        sb.append(this.argsValue);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'eventType' because it's a primitive and you chose the non-beans generator.
    if (eventID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventID' was not present! Struct: " + toString());
    }
    if (executorClusterID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executorClusterID' was not present! Struct: " + toString());
    }
    if (xjobExecutorType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'xjobExecutorType' was not present! Struct: " + toString());
    }
    if (mode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mode' was not present! Struct: " + toString());
    }
    if (executionContent == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executionContent' was not present! Struct: " + toString());
    }
    if (jobClassName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobClassName' was not present! Struct: " + toString());
    }
    if (jobPlanNodeName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobPlanNodeName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobEventStandardSchemeFactory implements SchemeFactory {
    public JobEventStandardScheme getScheme() {
      return new JobEventStandardScheme();
    }
  }

  private static class JobEventStandardScheme extends StandardScheme<JobEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EVENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventType = iprot.readI32();
              struct.setEventTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventID = iprot.readString();
              struct.setEventIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXECUTOR_CLUSTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executorClusterID = iprot.readString();
              struct.setExecutorClusterIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // XJOB_EXECUTOR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xjobExecutorType = iprot.readString();
              struct.setXjobExecutorTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mode = iprot.readString();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXECUTION_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executionContent = iprot.readString();
              struct.setExecutionContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JOB_CLASS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobClassName = iprot.readString();
              struct.setJobClassNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JOB_PLAN_NODE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobPlanNodeName = iprot.readString();
              struct.setJobPlanNodeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXECUTE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executeUser = iprot.readString();
              struct.setExecuteUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ARGS_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.argsValue = iprot.readString();
              struct.setArgsValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetEventType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.eventType);
      oprot.writeFieldEnd();
      if (struct.eventID != null) {
        oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
        oprot.writeString(struct.eventID);
        oprot.writeFieldEnd();
      }
      if (struct.executorClusterID != null) {
        oprot.writeFieldBegin(EXECUTOR_CLUSTER_ID_FIELD_DESC);
        oprot.writeString(struct.executorClusterID);
        oprot.writeFieldEnd();
      }
      if (struct.xjobExecutorType != null) {
        oprot.writeFieldBegin(XJOB_EXECUTOR_TYPE_FIELD_DESC);
        oprot.writeString(struct.xjobExecutorType);
        oprot.writeFieldEnd();
      }
      if (struct.mode != null) {
        oprot.writeFieldBegin(MODE_FIELD_DESC);
        oprot.writeString(struct.mode);
        oprot.writeFieldEnd();
      }
      if (struct.executionContent != null) {
        oprot.writeFieldBegin(EXECUTION_CONTENT_FIELD_DESC);
        oprot.writeString(struct.executionContent);
        oprot.writeFieldEnd();
      }
      if (struct.jobClassName != null) {
        oprot.writeFieldBegin(JOB_CLASS_NAME_FIELD_DESC);
        oprot.writeString(struct.jobClassName);
        oprot.writeFieldEnd();
      }
      if (struct.jobPlanNodeName != null) {
        oprot.writeFieldBegin(JOB_PLAN_NODE_NAME_FIELD_DESC);
        oprot.writeString(struct.jobPlanNodeName);
        oprot.writeFieldEnd();
      }
      if (struct.executeUser != null) {
        if (struct.isSetExecuteUser()) {
          oprot.writeFieldBegin(EXECUTE_USER_FIELD_DESC);
          oprot.writeString(struct.executeUser);
          oprot.writeFieldEnd();
        }
      }
      if (struct.argsValue != null) {
        if (struct.isSetArgsValue()) {
          oprot.writeFieldBegin(ARGS_VALUE_FIELD_DESC);
          oprot.writeString(struct.argsValue);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobEventTupleSchemeFactory implements SchemeFactory {
    public JobEventTupleScheme getScheme() {
      return new JobEventTupleScheme();
    }
  }

  private static class JobEventTupleScheme extends TupleScheme<JobEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.eventType);
      oprot.writeString(struct.eventID);
      oprot.writeString(struct.executorClusterID);
      oprot.writeString(struct.xjobExecutorType);
      oprot.writeString(struct.mode);
      oprot.writeString(struct.executionContent);
      oprot.writeString(struct.jobClassName);
      oprot.writeString(struct.jobPlanNodeName);
      BitSet optionals = new BitSet();
      if (struct.isSetExecuteUser()) {
        optionals.set(0);
      }
      if (struct.isSetArgsValue()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetExecuteUser()) {
        oprot.writeString(struct.executeUser);
      }
      if (struct.isSetArgsValue()) {
        oprot.writeString(struct.argsValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.eventType = iprot.readI32();
      struct.setEventTypeIsSet(true);
      struct.eventID = iprot.readString();
      struct.setEventIDIsSet(true);
      struct.executorClusterID = iprot.readString();
      struct.setExecutorClusterIDIsSet(true);
      struct.xjobExecutorType = iprot.readString();
      struct.setXjobExecutorTypeIsSet(true);
      struct.mode = iprot.readString();
      struct.setModeIsSet(true);
      struct.executionContent = iprot.readString();
      struct.setExecutionContentIsSet(true);
      struct.jobClassName = iprot.readString();
      struct.setJobClassNameIsSet(true);
      struct.jobPlanNodeName = iprot.readString();
      struct.setJobPlanNodeNameIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.executeUser = iprot.readString();
        struct.setExecuteUserIsSet(true);
      }
      if (incoming.get(1)) {
        struct.argsValue = iprot.readString();
        struct.setArgsValueIsSet(true);
      }
    }
  }

}

